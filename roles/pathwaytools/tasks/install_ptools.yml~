  #This is the main install script for PHAC's IRIDA server on the GVL.

  #check to see if gvl-apps dir is setup and installed
  - name: Check to see if gvl/apps dir exists and create if required
    file: name="{{ gvl_apps_home }}" state=directory owner=ubuntu group=ubuntu
    become: yes
    become_user: root

  #Do an apt-get update
  - name: Update the apt cache
    apt: update_cache=yes
    become: yes
    become_user: root

  #Install some extra system packages:
  - name: install required extra system packages
    apt: pkg={{ item }} state="latest"
    become: yes
    become_user: root
    with_items:
      - software-properties-common
      - mysql-server
      - python-mysqldb

  #Create the Pathway Tools file tree
  - name: create the Pathway Tools file tree
    file: name={{ item }} state=directory owner=ubuntu group=ubuntu
    become: yes
    become_user: root
    with_items:
      - "{{ ptools_home }}"
      - "{{ ptools_database }}"

  - name: Remove the MySQL test database
    action: mysql_db db="{{ ptools_mysql_database }}" state=absent

  #get the Pathway Tools release
  - name: Download Pathway Tools file
    get_url: url="{{ ptools_install_file }}" dest="{{ ptools_home }}/pathway-tools-19.5-linux-64-t1-mammal-install"
    environment: "{{ install_env }}"
    become: yes
    become_user: "ubuntu"

  #change the Pathway Tools file to executable
  - name: Change Pathway Tools file to executable
    file: path="{{ ptools_home }}/pathway-tools-19.5-linux-64-t1-mammal-install" state=file mode="u+x"

  #download the metaCyc database file
  - name: Download the metaCyc database file
    get_url: url="{{ ptools_database_file }}" dest="{{ ptools_database }}/meta.tar.gz"
    become: yes
    become_user: "ubuntu"

  # unarchive metaCyc database
  - name: Extract archive
    unarchive: src="{{ ptools_database }}/meta.tar.gz" dest="{{ ptools_database }}" copy=no
    become: yes
    become_user: "ubuntu"

  #change the Pathway Tools file to executable
  - name: Execute script if the pathway tools is not installed
    command: "{{ ptools_home }}/pathway-tools-19.5-linux-64-t1-mammal-install --unattendedmodeui none --mode unattended --InstallDir /mnt/gvl/apps/pathwaytools --PTOOLS_LOCAL_PATH /mnt/gvl/apps/pathwaytools"
    become: yes
    become_user: "ubuntu"
    register: ptools

  - debug: msg="{{ ptools.stdout }}"

  # remove web-accounts.sql into pathwaytools/aic-export/mysql/ folder
  - name: Remove old web-accounts.sql files foo
    file: path="{{ mysql_schema }}/web-accounts.sql" state=absent

  #Download web-accounts.sql into pathwaytools/aic-export/mysql/ folder
  - name: Download MYSQL web schema file for Pathway Tools
    get_url: url="{{ ptools_mysql_schema_webfile }}" dest="{{ mysql_schema }}/web-accounts.sql"
    become: yes
    become_user: ubuntu

  # remove ptools-init.dat file pathwaytools/ptools-local folder
  - name: Remove old pathway tools configuration files
    file: path="{{ ptools_conf_home }}/ptools-init.dat" state=absent

  #Download ptools-init.dat into "ptools-local" folder
  - name: Download pathway tools configuration file
    get_url: url="{{ ptools_web_conf_file }}" dest="{{ ptools_conf_home }}/ptools-init.dat"
    become: yes
    become_user: ubuntu

  - name: Create the Pathway database
    mysql_db: name="{{ ptools_mysql_database }}" state=present
    become: yes
    become_user: root

  #Grant privileges and create database
  - name: Grant privileges on pathway DB to ptuser user
    mysql_user: name="{{ database_user }}" password="{{ database_pass }}" priv="pathwayDB.*:ALL" host="localhost" state=present
    become: yes
    become_user: root

  - name: import schema pgdb-schema.sql
    mysql_db: name="{{ ptools_mysql_database }}" state=import target="{{ mysql_schema }}/pgdb-schema.sql"
    #become: yes
    #become_user: ""

  - name: import schema web-accounts.sql
    mysql_db: name="{{ ptools_mysql_database }}" state=import target="{{ mysql_schema }}/web-accounts.sql"
    #become: yes
    #become_user: "ptuser"


  #enable mysql
  - name: "Enable mysql"
    service: name="{{ item }}" enabled=yes
    become: yes
    become_user: root
    with_items:
      - mysql

  # Add file to nginx folder to get tomcat and nginx to talk nicely
  - name: "Copy nginx config file"
    copy: src="ptools.locations" dest="{{ nginx_config }}/ptools.locations" mode=0600
    become: yes
    become_user: root

  #Copy the info file to the info directory
  - name: "Copy the info file"
    copy: src="ptools.yml" dest="/opt/gvl/info/ptools.yml"
    become: yes
    become_user: root

  #Copy the manage_bootstrap_user.py to scripts/api for later use
  #- name: Copy manage_bootstrap_user.py to galaxy_app
  #  copy: src="{{ galaxy_server_dir }}/scripts/manage_bootstrap_user.py" dest="{{ galaxy_server_dir }}/scripts/api/manage_bootstrap_user.py" owner="galaxy" group="users"
  #  become: yes
  #  become_user: galaxy

  # Restart Nginx to apply changes
  - name: "restart nginx"
    service: name=nginx state=restarted
    become: yes
    become_user: root
